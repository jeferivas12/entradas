@page "/boletas"


@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService


<h3>Registro de boletas</h3>

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-6">
                <div class="mb-6">
                    <label> ID de Boleta:</label>
                    <div>
                        <input class="form-control" @bind="ID" placeholder="boleta" />
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="mb-6">
                    <label> Portería:</label>
                    <div>
                        <select class="form-select" @bind="Porteria">
                            <option value="Norte">-- Norte --</option>
                            <option value="Sur">-- Sur --</option>
                            <option value="Oriente">-- Oriente --</option>
                            <option value="Occidente">-- Occidente --</option>
                        </select>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="card-footer">
        <button class="btn btn-sm btn-primary float-end" type="button" onclick="@SaveBoletaAsync"><i class="oi oi-check" /> Registrar </button>
    </div>
</div>




@code {
    private Boleta? boleta;
    private int ID { get; set; }
    private string? Porteria { get; set; }

    private async Task SaveBoletaAsync()
    {
        await getBoletaAsync();
        if(boleta is null)
        {
            navigationManager.NavigateTo("/boletas");
            
        }
        else if (boleta!.Usada)
        {
            await sweetAlertService.FireAsync("Fraude", "Esta boleta ya fue redimida el " + boleta.Date + " en la portería " + boleta.Porteria, SweetAlertIcon.Error);
        }
        else
        {
            await putBoletaAsync();
        }

    }

    private async Task getBoletaAsync()
    {
        var responseHttp = await repository.Get<Boleta>($"/api/boletas/{ID}");
        if (responseHttp.Error)
        {
            boleta = null;
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                await sweetAlertService.FireAsync("Lo siento", "Esta no es una boleta válida", SweetAlertIcon.Info);
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        boleta = responseHttp.Response;

    }

    private async Task putBoletaAsync()
    {
        boleta!.Porteria = Porteria;
        boleta!.Date = DateTime.Now;
        boleta!.Usada = true;
        var responseHttp = await repository.Put("/api/boletas", boleta!);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await sweetAlertService.FireAsync("Gut", "Registro exitoso", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/boletas");

    }

}
